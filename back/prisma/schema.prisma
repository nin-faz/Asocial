// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @unique @default(uuid())
  username     String @unique
  password    String 
  articles Article[]
  comments Comment[]
  dislikes    Dislike[]
  bio       String?
  iconName   String? @default("Skull")
  createdAt DateTime @default(now())
}

model Dislike {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
}

model Article {
  id       String @id @unique @default(uuid())
  title    String
  content  String
  imageUrl String?
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  dislikes    Dislike[]
  createdAt DateTime @default(now())
  updatedAt DateTime?
  comments Comment[]
}

model Comment {
  id       String @id @unique @default(uuid())
  content  String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  article  Article? @relation(fields: [articleId], references: [id])
  articleId String?
  dislikes    Dislike[]
  createdAt DateTime @default(now())
  updatedAt DateTime?
}
